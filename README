CBC README
==========

Welcome to the README for the COIN Branch and Cut Solver (CBC). CBC is
distributed under the Eclipse Public License and is freely redistributable.
All source code and documentation is Copyright IBM and others. This README may
be redistributed freely.

DOCUMENTATION
=============

For a quick start guide, please see the INSTALL file in this distribution. A (somehwat outdated) user's manual is available here:

http://www.coin-or.org/Cbc

More up-to-date automatically generated documentation of the source code can
be found here:

http://www.coin-or.org/Doxygen/Cbc/

Further information can be found here:

http://projects.coin-or.org/Cbc

WHAT'S NEW
==========

Release 2.8.3:

1. Fix for handling SOS.

Release 2.8.2:

1. Fixed recognition of Glpk source in main configure.

2. Minor bugfixes in CoinUtils, Clp, and Cbc.

Release 2.8.1:

   Ted, please fill this in!

Release 2.8.0:

1. Introduced new secondaryStatus 8 to indicate that solving stopped due to an iteration limit.

2. Solution pool is now accessible via the command line and the CbcMain* interface.

3. New mipstart option to read an initial feasible solution from a file. Only values for discrete
   variables need to be provided.

4. Added Proximity Search heuristic by Fischetti and Monaci (off by default):
   The simplest way to switch it on using stand-alone version is "-proximity on".

   Proximity Search is the new "No-Neighborhood Search" 0-1 MIP refinement heuristic recently proposed by 
   Fischetti and Monaci (2012). The idea is to define a sub-MIP without additional constraints but with a 
   modified objective function intended to attract the search in the proximity of the incumbent. The approach 
   works well for 0-1 MIPs whose solution landscape is not too irregular (meaning the there is reasonable 
   probability of finding an improved solution by flipping a small number of binary variables), in particular 
   when it is applied to the first heuristic solutions found at the root node.
   
5. An implementation of Zero-Half-Cuts by Alberto Caprara is now available.
   By default, these cuts are off.  To use add to your command line -zerohalfCuts root (or other options) or just -zero.
   So far, they may help only on a small subset of problems and may need some tuning.

   The implementation of these cuts is described in
   G. Andreello, A. Caprara, and M. Fischetti
   "Embedding Cuts in a Branch and Cut Framework: a Computational Study with {0,1/2}-Cuts"
   INFORMS Journal on Computing 19(2), 229-238, 2007
   http://dx.doi.org/10.1287/ijoc.1050.0162

6. An alternative implementation of a reduce and split cut generator by Giacomo Nannicini is now available.
   By default, these cuts are off.  To use add to your command line -reduce2AndSplitCuts root (or other options).

   The implementation of these cuts is described in
   G. Cornuejols and G. Nannicini
   "Practical strategies for generating rank-1 split cuts in mixed-integer linear programming"
   Mathematical Programming Computation 3(4), 281-318, 2011
   http://dx.doi.org/10.1007/s12532-011-0028-6

7. An alternative robust implementation of a Gomory cut generator by Giacomo Nannicini is now available.
   By default, these cuts are off.  To use add to your command line -GMI root (or other options).

   The implementation of these cuts is described in
   G. Cornuejols, F. Margot, and G. Nannicini
   "On the safety of Gomory cut generators"
   http://faculty.sutd.edu.sg/~nannicini/index.php?page=publications

8. To encourage the use of some of the more exotic/expensive cut generators a parameter -slowcutpasses has been added.
   The idea is that the code does these cuts just a few times - less than the more usual cuts.  The default is 10.
   The cut generators identified by "may be slow" at present are just Lift and project and ReduceAndSplit (both versions).
   
9. Allow initialization of random seed by user.  Pseudo-random numbers are used in Cbc and Clp.  In Clp they
   are used to break ties in degenerate problems, while in Cbc heuristics such as the Feasibility Pump use them   
   to decide whether to round up or down.  So if a different pseudo-random seed is given to Clp then you may get
   a different continuous optimum and so different cuts and heuristic solutions. This can be switched on by 
   setting randomSeed for Clp and/or randomCbcSeed for Cbc.  The special value of 0 tells code to use time of day
   for initial seed.
   
10. Building on this idea, Andrea Lodi, Matteo Fischetti, Michele Monaci, Domenico Salvagnin, Yuji Shinano, and Andrea Tramontani
   suggest that this idea be improved by running at the root node with multiple copies of solver, each
   with its own different seed and then passing in the solutions and cuts so that the main solver has a richer
   set of solutions and possibly stronger cuts.  This is switched on by setting -multipleRootPasses.  These can also
   be done in parallel.
 
11. Few changes to presolve for special variables and badly scaled problems (in CoinUtils).

12. New option -extraVariables <number> which switches on a trivial re-formulation that introduces extra integer variables
    to group together variables with same cost.

13. For some problems, cut generators and general branching work better if the problem would be infeasible if the cost is too high.
    If the new option -constraintFromCutoff is set, the objective function is added as a constraint which rhs is set to the current
    cutoff value (objective value of best known solution).

Release 2.7.8:
   Look at https://projects.coin-or.org/Cbc/changeset?old_path=%2Freleases%2F2.7.7&new_path=%2Freleases%2F2.7.8 to see all changes.

1. Change message when LP simplex iteration limit is hit from "Exiting on maximum nodes"
   to "Exiting on maximum number of iterations"

2. Fix for using overlapping SOS.

3. Fixes in buildsystem.

Release 2.7.7:
   Look at https://projects.coin-or.org/Cbc/changeset?old_path=%2Freleases%2F2.7.6&new_path=%2Freleases%2F2.7.7 to see all changes.

1. Fix to report interruption on user event if SIGINT is received by CbcSolver.
   model->status() should now be 5 if this event happened.
   Added method CbcModel::sayEventHappened() to make cbc stop due to an 'user event'.

2. Other minor fixes.

Release 2.7.6:
   Look at https://projects.coin-or.org/Cbc/changeset?old_path=%2Freleases%2F2.7.5&new_path=%2Freleases%2F2.7.6 to see all changes.

1. Fixes to build system.

2. Other minor fixes.

Release 2.7.5:
   Look at https://projects.coin-or.org/Cbc/changeset?old_path=%2Freleases%2F2.7.4&new_path=%2Freleases%2F2.7.5 to see all changes.

1. Fixes to get AMPL interface working again.

2. More fixes to MSVC++ files.

Release 2.7.4:
   Look at https://projects.coin-or.org/Cbc/changeset?old_path=%2Freleases%2F2.7.3&new_path=%2Freleases%2F2.7.4 to see all changes.

1. Minor bugfixes.

Release 2.7.3:
   Look at https://projects.coin-or.org/Cbc/changeset?old_path=%2Freleases%2F2.7.2&new_path=%2Freleases%2F2.7.3 to see all changes.

1. Minor bugfixes.

2. Fixes to MSVC++ files.

Release 2.7.2:
   Look at https://projects.coin-or.org/Cbc/changeset?old_path=%2Freleases%2F2.7.1&new_path=%2Freleases%2F2.7.2 to see all changes.

1. Allow row/column names for GMPL models.

2. Added CbcModel::haveMultiThreadSupport() to indicate whether Cbc library has been compiled with multithread support.

3. Added CbcModel::waitingForMiniBranchAndBound() to indicate whether sub-MIP heuristic is currently running.

4. Cbc shell should work with readline if configured with --enable-gnu-packages.

5. Support for compressed input files (.gz, .bz2) is now enabled by default.

6. Fix problems with relative gap tolerance > 100% and further bugs.

7. Fixes for MSVC++ Version 9 files.

8. Minor fixes in buildsystem; update to BuildTools 0.7.1.

Release 2.7.1:
   Look at https://projects.coin-or.org/Cbc/changeset?old_path=%2Freleases%2F2.7.0&new_path=%2Freleases%2F2.7.1 to see all changes.

1. Fixes to MSVC++ files

Release 2.7.0:

1. License has been changed to the EPL.

2. Support for MSVC++ version 10 added.

3. Support for BuildTools version 0.7 to incorporate recent enhancements,
including proper library versioning in Linux, prohibiting installation of
private headers, etc.

4. Updated externals to new stable versions of dependent projects.

5. Improvements to heuristics. 

6. New options for cut generation. 

7. Improved reporting of results. 

8. Improvements to documentation. 

9. Minor bug fixes. 

SUPPORT
=======

1. List Serve

CBC users should use the Cbc mailing list. To subscribe, go to 
http://list.coin-or.org/mailman/listinfo/cbc

3. Bug Reports

Bug reports should be reported on the CBC development web site at

https://projects.coin-or.org/Cbc/newticket
